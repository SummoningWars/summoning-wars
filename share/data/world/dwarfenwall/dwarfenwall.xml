<World>
	<!-- Aisen, Zwergentrutz [Grenzfeste] -->
	<!-- Entsatz -->
	<!-- Rob, der Raeuber, Ende -->
	<Region id="12" name="dwarfenwall">
		<AmbientLight red="0.4" green="0.4" blue="0.4" />
		<HeroLight red="1.0" green="1.0" blue="1.0" /> 
		<DirectionalLight red="0.3" green="0.3" blue="0.3" />
		
		<Music>
			<Track source="the_prophecy.ogg" />
		</Music>
		
		<Settings dimx="36" dimy="28" region_template="dwarfenwall"  ground="grass1"/>
		
		<ReviveLocation  location="WaypointLoc" />
		
		<ExitDirections north="true" south="true" west="true" east="false" />
		
		<WorldPosition world_x="0.715" world_y ="0.46" waypoint="true"/>
		<ReviveLocation  location="WaypointLoc" />
		
		<Exits>
			<Exit name="exit_south" destination_region="aisWolfstones" destination_location="entry_north" >
				<Shape shape="RECT" extent_x="4.0" extent_y="4.0" />
			</Exit>
			<Exit name="exit_north" destination_region="necFieldcamp" destination_location="entry_south" >
				<Shape shape="RECT" extent_x="4.0" extent_y="4.0" />
			</Exit>
			<Exit name="exit_west" destination_region="aisEastslope" destination_location="entry_east" >
				<Shape shape="RECT" extent_x="4.0" extent_y="4.0" />
			</Exit>
			<Exit name="exit_rampart" destination_region="dwarfenwallRampart" destination_location="entry_south" >
				<Shape shape="RECT" extent_x="4.0" extent_y="4.0" />
			</Exit>
			<Exit name="exit_command" destination_region="dwarfenwallCommand" destination_location="entry_south" >
				<Shape shape="RECT" extent_x="1.0" extent_y="1.0" />
			</Exit>
		</Exits>
		
		<Environments>
			<Environment height="1.0" name="meadow" />
		</Environments>
		
		<Event trigger ="create_region" once = "true">
			<Effect>
				dwarfenwall = {};
				-- roles | index -> struct
				dwarfenwall.city = {};
				-- units | id -> index
				dwarfenwall.people = {};
				
			--sergeant
				dwarfenwall.city[1] = {};
				dwarfenwall.city[1]["location"] = "locSergeant";
				dwarfenwall.city[1]["healer"] = {"locPeasant9","locSergeant","heal","locPeasant9","locWay1","locHealerOut"};
				dwarfenwall.city[1]["important"] = true;
			--left guard of the command center
				dwarfenwall.city[2] = {};
				dwarfenwall.city[2]["location"] = "locCommandGuard1";
				dwarfenwall.city[2]["healer"] = {"locPeasant9","locCommandGuard1","heal","locPeasant9","locWay1","locHealerOut"};
				dwarfenwall.city[2]["important"] = true;
			--right guard of the command center
				dwarfenwall.city[3] = {};
				dwarfenwall.city[3]["location"] = "locCommandGuard2";
				dwarfenwall.city[3]["healer"] = {"locPeasant9","locCommandGuard2","heal","locPeasant9","locWay1","locHealerOut"};
				dwarfenwall.city[3]["important"] = true;
			--guard of the eastern restricted area
				dwarfenwall.city[4] = {};
				dwarfenwall.city[4]["location"] = "locNoEntry1";
				dwarfenwall.city[4]["healer"] = {"locNoEntry1","heal","locHealerOut"};
				dwarfenwall.city[4]["important"] = true;
			--guard of the western restricted area
				dwarfenwall.city[5] = {};
				dwarfenwall.city[5]["location"] = "locNoEntry2";
				dwarfenwall.city[5]["healer"] = {"locNoEntry2","heal","locHealerOut"};
				dwarfenwall.city[5]["important"] = true;
			--potion trader
				dwarfenwall.city[6] = {};
				dwarfenwall.city[6]["location"] = "locHealer";
				dwarfenwall.city[6]["healer"] = {"locPeasant3","locHealer","heal","locWay1","locHealerOut"};
				dwarfenwall.city[6]["important"] = true;
			--armor trader
				dwarfenwall.city[7] = {};
				dwarfenwall.city[7]["location"] = "locArmorTrader";
				dwarfenwall.city[7]["healer"] = {"locArmorTrader","heal","locWay1","locHealerOut"};
				dwarfenwall.city[7]["important"] = true;
			--weapon trader
				dwarfenwall.city[8] = {};
				dwarfenwall.city[8]["location"] = "locWeaponTrader";
				dwarfenwall.city[8]["healer"] = {"locWeaponTrader","heal","locWay1","locHealerOut"};
				dwarfenwall.city[8]["important"] = true;
			--blackmarket
				dwarfenwall.city[9] = {};
				dwarfenwall.city[9]["location"] = "locBlackmarket";
				dwarfenwall.city[9]["healer"] = {"locPeasant3","locWay2","locBlackmarket","heal","locWay2","locPeasant3","locWay1","locHealerOut"};
				dwarfenwall.city[9]["important"] = true;
				
			--peasants
				dwarfenwall.city[10] = {};
				dwarfenwall.city[10]["location"] = "locPeasant2";
				dwarfenwall.city[10]["respawn"] = {"locPeasant1"};
				dwarfenwall.city[10]["important"] = false;
				dwarfenwall.city[10]["moving"] = false;
				dwarfenwall.city[10]["refname"] = "Peasant";
				dwarfenwall.city[11] = {};
				dwarfenwall.city[11]["location"] = "locPeasant4";
				dwarfenwall.city[11]["respawn"] = {"locPeasant7","locWay1"};
				dwarfenwall.city[11]["important"] = false;
				dwarfenwall.city[11]["moving"] = false;
				dwarfenwall.city[11]["refname"] = "Peasant";
				dwarfenwall.city[12] = {};
				dwarfenwall.city[12]["location"] = "locPeasant6";
				dwarfenwall.city[12]["respawn"] = {"locHealerIn","locPeasant9"};
				dwarfenwall.city[12]["important"] = false;
				dwarfenwall.city[12]["moving"] = false;
				dwarfenwall.city[12]["refname"] = "Peasant";
				
				dwarfenwallPeasant1();
				dwarfenwallPeasant2();
				dwarfenwallPeasant3();

			--sergeant Wober
				dwarfenwall.sergeant = createObject('guard', "locSergeant",180);
				setRefName(dwarfenwall.sergeant, "Sergeant Wober");
				dwarfenwall.people[dwarfenwall.sergeant] = 1;
				dwarfenwall.city[1]["unit"]=dwarfenwall.sergeant;
				
			--Guards in front of the commandhouse
				dwarfenwall.guard1 = createObject('guard', 'locCommandGuard1',130);
				setRefName(dwarfenwall.guard1, 'Guard');
				dwarfenwall.people[dwarfenwall.guard1] = 2;
				dwarfenwall.city[2]["unit"]=dwarfenwall.guard1;
				
				dwarfenwall.guard2 = createObject('guard', 'locCommandGuard2',180);
				setRefName(dwarfenwall.guard2, 'Guard');
				dwarfenwall.people[dwarfenwall.guard2] = 3;
				dwarfenwall.city[2]["unit"]=dwarfenwall.guard2;
				
			--Guards guarding the restricted areas in the north of dwarfenwall
				dwarfenwall.guard3 = createObject('guard', 'locNoEntry1',130);
				setRefName(dwarfenwall.guard3, 'Guard');
				dwarfenwall.people[dwarfenwall.guard3] = 4;
				dwarfenwall.city[4]["unit"]=dwarfenwall.guard3;
				
				dwarfenwall.guard4 = createObject('guard', 'locNoEntry2',45);
				setRefName(dwarfenwall.guard4, 'Guard');
				dwarfenwall.people[dwarfenwall.guard4] = 5;
				dwarfenwall.city[5]["unit"]=dwarfenwall.guard4;
				
			--traders
				dwarfenwall.potions = createObject('aisen_trader', "locHealer",-90);
				setRefName(dwarfenwall.potions, "Drago");
				dwarfenwall.people[dwarfenwall.potions] = 6;
				dwarfenwall.city[6]["unit"]=dwarfenwall.potions;
				
				dwarfenwall.armors = createObject('aisen_traderess', "locArmorTrader",180);
				setRefName(dwarfenwall.armors, "Amelia");
				dwarfenwall.people[dwarfenwall.armors] = 7;
				dwarfenwall.city[7]["unit"]=dwarfenwall.armors;
				
				dwarfenwall.weapons = createObject('aisen_trader', "locWeaponTrader",-90);
				setRefName(dwarfenwall.weapons, "Haffgar");
				dwarfenwall.people[dwarfenwall.weapons] = 8;
				dwarfenwall.city[8]["unit"]=dwarfenwall.weapons;
				
				dwarfenwall.blackmarket = createObject('aisen_trader', "locBlackmarket",-90);
				setRefName(dwarfenwall.blackmarket, "Flynn");
				dwarfenwall.people[dwarfenwall.blackmarket] = 9;
				dwarfenwall.city[9]["unit"]=dwarfenwall.blackmarket;
				
			--stationary peasants
				dwarfenwall.peasant4 = createObject("peasant","locPeasant2",-90);
				dwarfenwall.people[dwarfenwall.peasant4] = 10;
				setRefName(dwarfenwall.peasant4,dwarfenwall.city[10]["refname"]);
				dwarfenwall.city[10]["unit"]=dwarfenwall.peasant4;
				
				
				dwarfenwall.peasant5 = createObject("peasant","locPeasant4",90);
				dwarfenwall.people[dwarfenwall.peasant5] = 11;
				setRefName(dwarfenwall.peasant5,dwarfenwall.city[11]["refname"]);
				dwarfenwall.city[11]["unit"]=dwarfenwall.peasant5;
				
				dwarfenwall.peasant6 = createObject("peasant","locPeasant6",-90);
				dwarfenwall.people[dwarfenwall.peasant6] = 12;
				setRefName(dwarfenwall.peasant6,dwarfenwall.city[12]["refname"]);
				dwarfenwall.city[12]["unit"]=dwarfenwall.peasant6;
				
				
			--walkingPeasants
				dwarfenwall.peasant1 = createObject("peasant","locPeasant1",-90);
				dwarfenwall.people[dwarfenwall.peasant1] = 13;
				setRefName(dwarfenwall.peasant1,dwarfenwall.city[13]["refname"]);
				dwarfenwall.city[13]["unit"]=dwarfenwall.peasant1;
				insertTrigger("peasantNextPhase");
				addTriggerVariable("id",13);
				
				dwarfenwall.peasant2 = createObject("peasant","locPeasant5",-90);
				dwarfenwall.people[dwarfenwall.peasant2] = 14;
				setRefName(dwarfenwall.peasant2,dwarfenwall.city[14]["refname"]);
				dwarfenwall.city[14]["unit"]=dwarfenwall.peasant2;
				insertTrigger("peasantNextPhase");
				addTriggerVariable("id",14);
				--addUnitCommand(dwarfenwall.peasant2,"walk","locPeasant6",3);
				
				dwarfenwall.peasant3 = createObject("peasant","locPeasant7",180);
				dwarfenwall.people[dwarfenwall.peasant3] = 15;
				setRefName(dwarfenwall.peasant3,dwarfenwall.city[15]["refname"]);
				dwarfenwall.city[15]["unit"]=dwarfenwall.peasant3;
				insertTrigger("peasantNextPhase");
				addTriggerVariable("id",15);
			</Effect>
		</Event>
		
		<Event trigger="peasantNextPhase">
			<Condition>
				--printTable(trigger);
				--print(dwarfenwall.city[trigger.id]["moving"]);
				if(trigger.id~=nil)then
					return(dwarfenwall.city[trigger.id]["moving"]==true);
				else
					print("all commands complete of a not registered unit");
					return false;
				end;
			</Condition>
			<Effect>
				local phase = dwarfenwall.city[trigger.id]["phase"];
				local codeChain = dwarfenwall.city[trigger.id][phase];
				--printTable(codeChain)
				for key,code in pairs(codeChain) do
					timedExecute(code[1],code[2]);
				end;
				dwarfenwall.city[trigger.id]["phase"]=dwarfenwall.city[trigger.id]["phase"]%dwarfenwall.city[trigger.id]["phaseCount"]+1;
				--print("next phase: "..dwarfenwall.city[trigger.id]["phase"])
			</Effect>
		</Event>
		
		<!-- Peasants -->
		<Event trigger="all_commands_complete">
			<Effect>
				--print("unit: "..trigger.unit);
				--print("subtype: "..get(trigger.unit,"subtype"));
				insertTrigger("peasantNextPhase");
				addTriggerVariable("id",dwarfenwall.people[trigger.unit]);
			</Effect>
		</Event>		
	</Region>
</World>
